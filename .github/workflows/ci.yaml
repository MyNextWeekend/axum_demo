name: 自动构建 by uv
on:
  push:
    # branches:
    #   - main
    tags:
      - "v*"  # 匹配所有以 v 开头的 Tag（如 v0.1.0、v1.2.3-beta）
  pull_request:
    branches:
      - main

jobs:
  build:
    name: 构建 ${{ matrix.os }} (${{ matrix.target }})
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu, macos, windows ]
        # target: [ x86_64, aarch64 ]
        target: [ aarch64 ]
        include:
          - os: windows
            ls: dir
    steps:
      - name: 读取仓库代码
        uses: actions/checkout@v2

      - name: 安装rust
        uses: dtolnay/rust-toolchain@stable

      - id: cache-rust
        name: rust缓存
        uses: Swatinem/rust-cache@v2

      - name: 构建产物
        run: cargo build --release

      - name: 找到 WIN 构建的产物
        if: matrix.os == 'windows'
        run: dir target\release\
        # since the runner is dynamic shellcheck (from actionlint) can't infer this is powershell
        # so we specify it explicitly
        shell: powershell

      - name: 找到 MAC 构建的产物
        if: matrix.os != 'windows'
        run: find target/release/

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os  }}-${{ matrix.target }}
          path: target/release/*

  merge-build-artifacts:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: 聚合构建产物
        uses: actions/upload-artifact/merge@v4
        with:
          name: dist
          pattern: dist-*
       
  # 发布任务
  release:
    runs-on: ubuntu-latest
    needs: [build, merge-build-artifacts]
    # 只在推送标签时运行
    if: success() && startsWith(github.ref, 'refs/tags/')
    permissions:
      # 添加创建发布的权限
      contents: write
    steps:
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist  # 下载到dist目录

      - name: 验证文件存在性
        run: |
          echo "当前目录结构："
          tree dist  # 显示完整目录结构
          echo "找到的wheel文件："
          find dist -name "*.whl"  # 查找所有wheel文件

      - name: 创建GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # 从标签名提取版本号作为发布标题
          name: Release ${{ github.ref_name }}
          # 上传dist目录下的所有文件
          files: |
            dist/**/*.whl
          draft: true  # 设为草稿（不直接发布）
          prerelease: false  # 不设为预发布（正式版本）